---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    goharbor.io/deploy-engine: Kustomization
    goharbor.io/deploy-mode: cluster
    goharbor.io/operator-version: v1.0.0
  name: minio-operator
  namespace: kube-repo
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    goharbor.io/deploy-engine: Kustomization
    goharbor.io/deploy-mode: cluster
    goharbor.io/operator-version: v1.0.0
  name: postgres-operator
  namespace: kube-repo
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    goharbor.io/deploy-engine: Kustomization
    goharbor.io/deploy-mode: cluster
    goharbor.io/operator-version: v1.0.0
  name: redisoperator
  namespace: kube-repo
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  annotations:
    goharbor.io/deploy-engine: Kustomization
    goharbor.io/deploy-mode: cluster
    goharbor.io/operator-version: v1.0.0
  name: leader-election-role
  namespace: kube-repo
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - ""
    resources:
      - configmaps/status
    verbs:
      - get
      - update
      - patch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    goharbor.io/deploy-engine: Kustomization
    goharbor.io/deploy-mode: cluster
    goharbor.io/operator-version: v1.0.0
  creationTimestamp: null
  name: harbor-operator-role
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - secrets
      - services
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - ""
    resources:
      - configmaps
      - services
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - acid.zalan.do
    resources:
      - operatorconfigurations
      - postgresqls
    verbs:
      - create
      - delete
      - deletecollection
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - acid.zalan.do
    resources:
      - postgresqls/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - customresourcedefinitions
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - apps
    resources:
      - deployments
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - apps
    resources:
      - deployments
      - statefulsets
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - cert-manager.io
    resources:
      - certificates
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - cert-manager.io
    resources:
      - certificates
      - issuers
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - databases.spotahome.com
    resources:
      - redisfailovers
    verbs:
      - '*'
  - apiGroups:
      - goharbor.io
    resources:
      - chartmuseums
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - goharbor.io
    resources:
      - chartmuseums
      - cores
      - jobservices
      - notaryservers
      - notarysigners
      - portals
      - registries
      - registrycontrollers
      - trivies
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - goharbor.io
    resources:
      - chartmuseums/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - goharbor.io
    resources:
      - cores
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - goharbor.io
    resources:
      - cores/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - goharbor.io
    resources:
      - harborclusters
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - goharbor.io
    resources:
      - harborclusters/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - goharbor.io
    resources:
      - harbors
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - goharbor.io
    resources:
      - harbors/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - goharbor.io
    resources:
      - jobservices
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - goharbor.io
    resources:
      - jobservices/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - goharbor.io
    resources:
      - notaryservers
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - goharbor.io
    resources:
      - notaryservers/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - goharbor.io
    resources:
      - notarysigners
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - goharbor.io
    resources:
      - notarysigners/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - goharbor.io
    resources:
      - portals
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - goharbor.io
    resources:
      - portals/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - goharbor.io
    resources:
      - registries
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - goharbor.io
    resources:
      - registries/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - goharbor.io
    resources:
      - registrycontrollers
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - goharbor.io
    resources:
      - registrycontrollers/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - goharbor.io
    resources:
      - trivies
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - goharbor.io
    resources:
      - trivies/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - minio.min.io
    resources:
      - '*'
    verbs:
      - '*'
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - networking.k8s.io
    resources:
      - networkpolicies
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    goharbor.io/deploy-engine: Kustomization
    goharbor.io/deploy-mode: cluster
    goharbor.io/operator-version: v1.0.0
  name: minio-operator-role
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
      - secrets
      - pods
      - services
      - events
    verbs:
      - get
      - watch
      - create
      - list
      - delete
      - deletecollection
  - apiGroups:
      - apps
    resources:
      - statefulsets
      - deployments
    verbs:
      - get
      - create
      - list
      - patch
      - watch
      - update
      - delete
  - apiGroups:
      - batch
    resources:
      - jobs
    verbs:
      - get
      - create
      - list
      - patch
      - watch
      - update
      - delete
  - apiGroups:
      - certificates.k8s.io
    resources:
      - certificatesigningrequests
      - certificatesigningrequests/approval
      - certificatesigningrequests/status
    verbs:
      - update
      - create
      - get
      - delete
  - apiGroups:
      - certificates.k8s.io
    resourceNames:
      - kubernetes.io/legacy-unknown
    resources:
      - signers
    verbs:
      - approve
      - sign
  - apiGroups:
      - minio.min.io
    resources:
      - '*'
    verbs:
      - '*'
  - apiGroups:
      - min.io
    resources:
      - '*'
    verbs:
      - '*'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    goharbor.io/deploy-engine: Kustomization
    goharbor.io/deploy-mode: cluster
    goharbor.io/operator-version: v1.0.0
  name: postgres-operator
rules:
  - apiGroups:
      - acid.zalan.do
    resources:
      - postgresqls
      - postgresqls/status
      - operatorconfigurations
    verbs:
      - create
      - delete
      - deletecollection
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - customresourcedefinitions
    verbs:
      - create
      - get
      - patch
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - create
      - delete
      - deletecollection
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - create
      - delete
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - persistentvolumeclaims
    verbs:
      - delete
      - get
      - list
  - apiGroups:
      - ""
    resources:
      - persistentvolumes
    verbs:
      - get
      - list
      - update
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - ""
    resources:
      - pods/exec
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - create
      - delete
      - get
      - patch
      - update
  - apiGroups:
      - apps
    resources:
      - statefulsets
      - deployments
    verbs:
      - create
      - delete
      - get
      - list
      - patch
  - apiGroups:
      - batch
    resources:
      - cronjobs
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - get
  - apiGroups:
      - policy
    resources:
      - poddisruptionbudgets
    verbs:
      - create
      - delete
      - get
  - apiGroups:
      - ""
    resources:
      - serviceaccounts
    verbs:
      - get
      - create
  - apiGroups:
      - rbac.authorization.k8s.io
    resources:
      - rolebindings
    verbs:
      - get
      - create
  - apiGroups:
      - extensions
    resourceNames:
      - privileged
    resources:
      - podsecuritypolicies
    verbs:
      - use
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    goharbor.io/deploy-engine: Kustomization
    goharbor.io/deploy-mode: cluster
    goharbor.io/operator-version: v1.0.0
  name: postgres-pod
rules:
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - create
      - delete
      - deletecollection
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - create
  - apiGroups:
      - extensions
    resourceNames:
      - privileged
    resources:
      - podsecuritypolicies
    verbs:
      - use
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    goharbor.io/deploy-engine: Kustomization
    goharbor.io/deploy-mode: cluster
    goharbor.io/operator-version: v1.0.0
  name: redisoperator
rules:
  - apiGroups:
      - databases.spotahome.com
    resources:
      - redisfailovers
    verbs:
      - '*'
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - customresourcedefinitions
    verbs:
      - '*'
  - apiGroups:
      - ""
    resources:
      - pods
      - services
      - endpoints
      - events
      - configmaps
    verbs:
      - '*'
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
  - apiGroups:
      - apps
    resources:
      - deployments
      - statefulsets
    verbs:
      - '*'
  - apiGroups:
      - policy
    resources:
      - poddisruptionbudgets
    verbs:
      - '*'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  annotations:
    goharbor.io/deploy-engine: Kustomization
    goharbor.io/deploy-mode: cluster
    goharbor.io/operator-version: v1.0.0
  name: leader-election-rolebinding
  namespace: kube-repo
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: leader-election-role
subjects:
  - kind: ServiceAccount
    name: default
    namespace: kube-repo
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    goharbor.io/deploy-engine: Kustomization
    goharbor.io/deploy-mode: cluster
    goharbor.io/operator-version: v1.0.0
  name: harbor-operator-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: harbor-operator-role
subjects:
  - kind: ServiceAccount
    name: default
    namespace: kube-repo
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    goharbor.io/deploy-engine: Kustomization
    goharbor.io/deploy-mode: cluster
    goharbor.io/operator-version: v1.0.0
  name: minio-operator-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: minio-operator-role
subjects:
  - kind: ServiceAccount
    name: minio-operator
    namespace: kube-repo
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    goharbor.io/deploy-engine: Kustomization
    goharbor.io/deploy-mode: cluster
    goharbor.io/operator-version: v1.0.0
  name: postgres-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: postgres-operator
subjects:
  - kind: ServiceAccount
    name: postgres-operator
    namespace: kube-repo
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    goharbor.io/deploy-engine: Kustomization
    goharbor.io/deploy-mode: cluster
    goharbor.io/operator-version: v1.0.0
  name: redisoperator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: redisoperator
subjects:
  - kind: ServiceAccount
    name: redisoperator
    namespace: kube-repo
---
apiVersion: v1
data:
  chartmuseum-config.yaml.tmpl: |
    {{- if .Spec.Server.TLS.Enabled }}
    port: 8443
    tls:
      ca.cert: /etc/chartmuseum/ssl/ca.crt
      cert: /etc/chartmuseum/ssl/tls.crt
      key: /etc/chartmuseum/ssl/tls.key
    {{- else }}
    port: 8080
    {{- end }}
    allow.overwrite: {{ .Spec.Chart.AllowOvewrite }}
    auth:
      anonymous.get: {{ .Spec.Authentication.AnonymousGet }}
    {{- if .Spec.Authentication.Bearer }}
      {{- if .Spec.Authentication.Bearer.CertificateRef }}
      cert-path: /etc/chartmuseum/auth-certificates/tls.crt
      {{- end }}
      {{- if .Spec.Authentication.Bearer.Realm }}
      realm: {{ .Spec.Authentication.Bearer.Realm }}
      service: {{ .Spec.Authentication.Bearer.Service }}
      {{- end }}
    {{- end }}
    {{- if .Spec.Authentication.Bearer }}
    bearer.auth: 1
    {{- end }}
    {{- if .Spec.Cache.Redis }}
    {{- if .Spec.Cache.Redis.SentinelMasterSet }}
    cache: redis_sentinel
    {{- else }}
    cache: redis
    {{- end }}
    cache.redis:
      {{- if .Spec.Cache.Redis.SentinelMasterSet }}
      mastername: {{ .Spec.Cache.Redis.SentinelMasterSet | quote }}
      {{- end }}
      {{- if .Spec.Cache.Redis.Port }}
      addr: {{ printf "%s:%d" .Spec.Cache.Redis.Host .Spec.Cache.Redis.Port | quote }}
      {{- else }}
      addr: {{ .Spec.Cache.Redis.Host | quote }}
      {{- end }}
      # password: setted through environment variable
      db: {{ .Spec.Cache.Redis.Database }}
    {{- end }}
    context.path: ''
    debug: {{ .Spec.Log.Debug }}
    {{- if .Spec.Chart.Repo.DepthDynamic }}
    depth.dynamic: {{ .Spec.Chart.Repo.DepthDynamic }}
    {{- else }}
    depth: {{ .Spec.Chart.Repo.Depth }}
    {{- end }}
    disable:
      api: {{ .Spec.Disable.API }}
      delete: {{ .Spec.Disable.Delete }}
      force.overwrite: {{ .Spec.Disable.ForceOverwrite }}
      metrics: {{ .Spec.Disable.Metrics }}
      statefiles: {{ .Spec.Disable.StateFiles }}
    index.limit: {{ .Spec.Chart.Index.ParallelLimit }}
    log:
      health: {{ .Spec.Log.Health }}
      json: {{ .Spec.Log.JSON }}
    max:
      storage.objects: {{ .Spec.Chart.Storage.MaxStorageObjects }}
      upload.size: {{ .Spec.Server.MaxUploadSize }}
    chart.post.form.field.name: {{ .Spec.Chart.PostFormFieldName.Chart }}
    prov.post.form.field.name: {{ .Spec.Chart.PostFormFieldName.Provenance }}
  core-config.conf.tmpl: |
    appname = {{ .Name }}
    runmode = prod
    enablegzip = {{ .Spec.HTTP.GZip }}
    [prod]
    httpport = 8080
  jobservice-config.yaml.tmpl: |
    {{/*
      https://github.com/goharbor/harbor/blob/master/make/photon/prepare/templates/jobservice/config.yml.jinja
      https://github.com/goharbor/harbor/blob/master/src/jobservice/config/config.go#L63
    */}}
    {{- if .Spec.TLS.Enabled }}
    protocol: "https"
    port: 8443
    https_config:
      cert: /etc/jobservice/ssl/tls.crt
      key: /etc/jobservice/ssl/tls.key
    {{- else }}
    protocol: "http"
    port: 8080
    {{- end }}
    worker_pool:
      backend: "redis"
      redis_pool:
        redis_url: {{ "redis-password" | secretData .Spec.WorkerPool.Redis.PasswordRef | .Spec.WorkerPool.Redis.GetDSN }}
        namespace: {{ default ( printf "jobservice::%s::%s" .ObjectMeta.Namespace .ObjectMeta.Name ) .Spec.WorkerPool.Redis.Namespace }}
        idle_timeout_second: {{ .Spec.WorkerPool.Redis.IdleTimeout.Duration.Seconds | int64 }}
    job_loggers:
    {{- if .Spec.JobLoggers.Database }}
    - name: DB
      level: {{ .Spec.JobLoggers.Database.Level }}
      sweeper:
        duration: {{ div .Spec.JobLoggers.Database.Sweeper.Duration.Hours 24 }} # days
    {{- end }}
    {{- if .Spec.JobLoggers.STDOUT }}
    - name: STD_OUTPUT
      level: {{ .Spec.JobLoggers.STDOUT.Level }}
    {{- end }}
    {{- range $i, $logger := .Spec.JobLoggers.Files }}
    - name: FILE
      level: {{ $logger.Level }}
      settings: # Customized settings of logger
        base_dir: /mnt/joblogs/{{ $i }}
      sweeper:
        duration: {{ div $logger.Sweeper.Duration.Hours 24 }} # days
        settings: # Customized settings of sweeper
          work_dir: /mnt/joblogs/{{ $i }}
    {{- end }}
    loggers:
    {{- if .Spec.Loggers.Database }}
    - name: DB
      level: {{ .Spec.Loggers.Database.Level }}
      sweeper:
        duration: {{ div .Spec.Loggers.Database.Sweeper.Duration.Hours 24 }} # days
    {{- end }}
    {{- if .Spec.Loggers.STDOUT }}
    - name: STD_OUTPUT
      level: {{ .Spec.Loggers.STDOUT.Level }}
    {{- end }}
    {{- range $i, $logger := .Spec.Loggers.Files }}
    - name: FILE
      level: {{ $logger.Level }}
      settings: # Customized settings of logger
        base_dir: /mnt/joblogs/{{ $i }}
      sweeper:
        duration: {{ div $logger.Sweeper.Duration.Hours 24 }} # days
        settings: # Customized settings of sweeper
          work_dir: /mnt/logs/{{ $i }}
    {{- end }}
  notaryserver-config.json.tmpl: |
    {{/* https://github.com/theupdateframework/notary/blob/master/docs/reference/server-config.md */}}
    {
      "server": {
        {{- if .Spec.TLS }}
          "tls_cert_file": "/etc/notary-server/certificates/tls.crt",
          "tls_key_file": "/etc/notary-server/certificates/tls.key",
        {{- end }}
        "http_addr": ":4443"
      },
      "trust_service": {
      {{- if .Spec.TrustService.Remote }}
        {{- if .Spec.TrustService.Remote.Host }}
        "hostname": "{{ .Spec.TrustService.Remote.Host }}",
        {{- end }}
        {{- if .Spec.TrustService.Remote.Port }}
        "port": "{{ .Spec.TrustService.Remote.Port }}",
        {{- end }}
        {{- if .Spec.TrustService.Remote.CertificateRef }}
        "tls_ca_file": "/etc/notary-server/trust-certificates/ca.crt",
        "tls_client_cert": "/etc/notary-server/trust-certificates/tls.crt",
        "tls_client_key": "/etc/notary-server/trust-certificates/tls.key",
        {{- end }}
        {{- if .Spec.TrustService.Remote.KeyAlgorithm }}
        "key_algorithm": "{{ .Spec.TrustService.Remote.KeyAlgorithm }}",
        {{- end }}
        "type": "remote"
      {{- else }}
        "type": "local"
      {{- end }}
      },
      {{- if .Spec.Logging.Level }}
      "logging": {
        "level": "{{ .Spec.Logging.Level }}"
      },
      {{- end }}
      "storage": {
        "backend": "postgres",
        "db_url": "{{ .Spec.Storage.GetPasswordFieldKey | secretData .Spec.Storage.Postgres.PostgresConnection.PostgresCredentials.PasswordRef | .Spec.Storage.Postgres.GetDSN | toString }}"
      },
      {{- if .Spec.Authentication }}
      "auth": {
        "type": "token",
        "options": {
          "realm": "{{ .Spec.Authentication.Token.Realm }}",
          "service": "{{ .Spec.Authentication.Token.Service }}",
          "issuer": "{{ .Spec.Authentication.Token.Issuer }}",
          "rootcertbundle": "/etc/notary-server/auth-certificates/tls.crt",
          "autoredirect": "{{ .Spec.Authentication.Token.AutoRedirect }}"
        }
      },
      {{- end }}
      "caching": {
        "max_age": {
          "current_metadata": 300,
          "consistent_metadata": 31536000
        }
      }
    }
  notarysigner-config.json.tmpl: |
    {{/* https://github.com/theupdateframework/notary/blob/master/docs/reference/server-config.md */}}
    {
      "server": {
        "tls_cert_file": "/etc/notary-signer/certificates/tls.crt",
        "tls_key_file": "/etc/notary-signer/certificates/tls.key",
        "client_ca_file": "/etc/notary-signer/certificates/ca.crt",
        "grpc_addr": ":7899"
      },
      {{- if .Spec.Logging.Level }}
      "logging": {
        "level": "{{ .Spec.Logging.Level }}"
      },
      {{- end }}
      "storage": {
        "backend": "postgres",
        "db_url": "{{ .Spec.Storage.GetPasswordFieldKey | secretData .Spec.Storage.Postgres.PostgresConnection.PostgresCredentials.PasswordRef | .Spec.Storage.Postgres.GetDSN | toString }}",
        "default_alias": "default"
      },
      "caching": {
        "max_age": {
          "current_metadata": 300,
          "consistent_metadata": 31536000
        }
      }
    }
  portal-config.conf.tmpl: |
    worker_processes auto;
    pid /tmp/nginx.pid;
    events {
        worker_connections {{ default 1024 .Spec.MaxConnections }};
    }
    http {
        client_body_temp_path /tmp/client_body_temp;
        proxy_temp_path /tmp/proxy_temp;
        fastcgi_temp_path /tmp/fastcgi_temp;
        uwsgi_temp_path /tmp/uwsgi_temp;
        scgi_temp_path /tmp/scgi_temp;
        server {
    {{- if .Spec.TLS.Enabled }}
            listen 8443 ssl;
            # SSL
            ssl_certificate /etc/portal/ssl/tls.crt;
            ssl_certificate_key /etc/portal/ssl/tls.key;
            # Recommendations from https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html
            ssl_protocols TLSv1.2;
            ssl_ciphers '!aNULL:kECDH+AESGCM:ECDH+AESGCM:RSA+AESGCM:kECDH+AES:ECDH+AES:RSA+AES:';
            ssl_prefer_server_ciphers on;
            ssl_session_cache shared:SSL:10m;
    {{- else }}
            listen 8080;
    {{- end }}
            server_name  localhost;
            root   /usr/share/nginx/html;
            index  index.html index.htm;
            include /etc/nginx/mime.types;
            gzip on;
            gzip_min_length 1000;
            gzip_proxied expired no-cache no-store private auth;
            gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;
            location / {
                try_files $uri $uri/ /index.html;
            }
            location = /index.html {
                add_header Cache-Control "no-store, no-cache, must-revalidate";
            }
        }
    }
  registry-config.yaml.tmpl: "# https://docs.docker.com/registry/configuration/\nversion: 0.1\nlog:\n  accesslog:\n    disabled: {{ .Spec.Log.AccessLog.Disabled }}\n  level: {{ .Spec.Log.Level | quote }}\n  formatter: {{ .Spec.Log.Formatter | quote }}\n  {{- if .Spec.Log.Fields }}\n  fields: {{ .Spec.Log.Fields | toJson }}\n  {{- end }}\n  {{- if .Spec.Log.Hooks }}\n  hooks:\n    {{- range $index, $element := .Spec.Log.Hooks }}\n    - type: {{ $element.Type | quote }}\n      disabled: {{ $element.Disabled }}\n      {{- if $element.Levels }}\n      levels: {{ $element.Levels | toJson }}\n      {{- end }}\n      {{- if $element.OptionsRef }}\n      {{- with ( secretData $element.OptionsRef) }}\n      {{- if . }}\n      options: {{ toJson . }}\n      {{- end }}\n      {{- end }}\n      {{- end }}\n    {{- end }}\n  {{- end }}\nhttp:\n  # secret: setted through environment variable\n  {{- if .Spec.HTTP.Debug }}\n  debug:\n    addr: :{{ .Spec.HTTP.Debug.Port }}\n    prometheus:\n      enabled: {{ .Spec.HTTP.Debug.Prometheus.Enabled }}\n      path: {{ .Spec.HTTP.Debug.Prometheus.Path | quote }}\n  {{- end }}\n  net: {{ .Spec.HTTP.Net | quote }}\n  addr: :5000\n  {{- if .Spec.HTTP.Prefix }}\n  prefix: {{ .Spec.HTTP.Prefix | quote }}\n  {{- end }}\n  {{- if .Spec.HTTP.Headers }}\n  headers: {{ .Spec.HTTP.Headers | toJson }}\n  {{- end }}\n  http2:\n    disabled: {{ .Spec.HTTP.HTTP2.Disabled }}\n  host: {{ .Spec.HTTP.Host | quote }}\n  relativeurls: {{ .Spec.HTTP.RelativeURLs }}\n  {{- if .Spec.HTTP.DrainTimeout }}\n  draintimeout: {{ .Spec.HTTP.DrainTimeout.Duration }}\n  {{- end }}\n  {{- if .Spec.HTTP.TLS.Enabled }}\n  tls:\n    certificate: /etc/registry/ssl/tls.crt\n    key: /etc/registry/ssl/tls.key\n  {{- end }}\n{{- if .Spec.Reporting }}\nreporting:\n  {{- range $name, $reference := .Spec.Reporting }}\n  {{ $name | quote }}: {{ secretData $reference | toJson }}\n  {{- end }}\n{{- end }}\nstorage:\n  {{- if .Spec.Storage.Delete.Enabled }}\n  delete:\n    {{- if .Spec.Storage.Delete.Enabled }}\n    enabled: {{ .Spec.Storage.Delete.Enabled }}\n    {{- end }}\n  {{- end }}\n  cache:\n    blobdescriptor: {{ default \"inmemory\" .Spec.Storage.Cache.Blobdescriptor | quote }}\n  maintenance:\n    uploadPurging:\n      enabled: {{ .Spec.Storage.Maintenance.UploadPurging.Enabled }}\n      {{- if .Spec.Storage.Maintenance.UploadPurging.Age }}\n      age: {{ .Spec.Storage.Maintenance.UploadPurging.Age.Duration }}\n      {{- end }}\n      {{- if .Spec.Storage.Maintenance.UploadPurging.Interval }}\n      interval: {{ .Spec.Storage.Maintenance.UploadPurging.Interval.Duration }}\n      {{- end }}\n      dryRun: {{ .Spec.Storage.Maintenance.UploadPurging.DryRun }}\n    readOnly:\n      enabled: {{ .Spec.Storage.Maintenance.ReadOnly.Enabled }}\n  redirect: \n    disable: {{ .Spec.Storage.Redirect.Disable }}\n\n  {{- if .Spec.Storage.Driver.InMemory }}\n  inmemory: {}\n  {{- end }}\n\n  {{- if .Spec.Storage.Driver.FileSystem }}\n  filesystem:\n    rootdirectory: /var/lib/registry\n    maxthreads: {{ .Spec.Storage.Driver.FileSystem.MaxThreads }}\n  {{- end }}\n\n  {{- if .Spec.Storage.Driver.S3 }}\n  s3:\n    region: {{ .Spec.Storage.Driver.S3.Region | quote }}\n    bucket: {{ .Spec.Storage.Driver.S3.Bucket | quote }}\n    encrypt: {{ .Spec.Storage.Driver.S3.Encrypt }}\n    skipverify: {{ .Spec.Storage.Driver.S3.SkipVerify }}\n    {{- if .Spec.Storage.Driver.S3.KeyID }}\n    keyid: {{ .Spec.Storage.Driver.S3.KeyID | quote }}\n    {{- end }}\n    {{- if .Spec.Storage.Driver.S3.Secure }}\n    secure: {{ .Spec.Storage.Driver.S3.Secure }}\n    {{- end }}\n    {{- if .Spec.Storage.Driver.S3.V4Auth }}\n    v4auth: {{ .Spec.Storage.Driver.S3.V4Auth }}\n    {{- end }}\n    {{- if .Spec.Storage.Driver.S3.ChunkSize }}\n    chunksize: {{ .Spec.Storage.Driver.S3.ChunkSize }}\n    {{- end }}\n    {{- if .Spec.Storage.Driver.S3.StorageClass }}\n    storageclass: {{ .Spec.Storage.Driver.S3.StorageClass | quote }}\n    {{- end }}\n    {{- if .Spec.Storage.Driver.S3.RootDirectory }}\n    rootdirectory: {{ .Spec.Storage.Driver.S3.RootDirectory | quote }}\n    {{- end }}\n    {{- if .Spec.Storage.Driver.S3.AccessKey }}\n    accesskey: {{ .Spec.Storage.Driver.S3.AccessKey | quote }}\n    {{- end }}\n    {{- if .Spec.Storage.Driver.S3.SecretKeyRef }}\n    # secretkey: setted through environment variable\n    {{- end }}\n    {{- if .Spec.Storage.Driver.S3.RegionEndpoint }}\n    regionendpoint: {{ .Spec.Storage.Driver.S3.RegionEndpoint | quote }}\n    {{- end }}\n  {{- end }}\n\n  {{- if .Spec.Storage.Driver.Swift }}\n  swift:\n    username: {{ .Spec.Storage.Driver.Swift.Username | quote }}\n    # password: setted through environment variable\n    authurl: {{ .Spec.Storage.Driver.Swift.AuthURL | quote }}\n    container: {{ .Spec.Storage.Driver.Swift.Container | quote }}\n    insecureskipverify: {{ .Spec.Storage.Driver.Swift.InsecureSkipVerify }}\n    {{- if .Spec.Storage.Driver.Swift.Prefix }}\n    prefix: {{ .Spec.Storage.Driver.Swift.Prefix | quote }}\n    {{- end }}\n    {{- if .Spec.Storage.Driver.Swift.EndpointType }}\n    endpointtype: {{ .Spec.Storage.Driver.Swift.EndpointType | quote }}\n    {{- end }}\n    {{- if .Spec.Storage.Driver.Swift.ChunkSize }}\n    chunksize: {{ .Spec.Storage.Driver.Swift.ChunkSize }}\n    {{- end }}\n    {{- if .Spec.Storage.Driver.Swift.AccessKey }}\n    accesskey: {{ .Spec.Storage.Driver.Swift.AccessKey | quote }}\n    {{- end }}\n    {{- if .Spec.Storage.Driver.Swift.SecretKeyRef }}\n    # secretkey: setted through environment variable\n    {{- end }}\n    {{- if .Spec.Storage.Driver.Swift.AuthVersion }}\n    authversion: {{ .Spec.Storage.Driver.Swift.AuthVersion | quote }}\n    {{- end }}\n    {{- if .Spec.Storage.Driver.Swift.Tenant }}\n    tenantid: {{ .Spec.Storage.Driver.Swift.Tenant | quote }}\n    {{- end }}\n    {{- if .Spec.Storage.Driver.Swift.TenantID }}\n    tenantid: {{ .Spec.Storage.Driver.Swift.TenantID | quote }}\n    {{- end }}\n    {{- if .Spec.Storage.Driver.Swift.Domain }}\n    domain: {{ .Spec.Storage.Driver.Swift.Domain | quote }}\n    {{- end }}\n    {{- if .Spec.Storage.Driver.Swift.DomainID }}\n    domainid: {{ .Spec.Storage.Driver.Swift.DomainID | quote }}\n    {{- end }}\n    {{- if .Spec.Storage.Driver.Swift.TrustID }}\n    trustid: {{ .Spec.Storage.Driver.Swift.TrustID | quote }}\n    {{- end }}\n    {{- if .Spec.Storage.Driver.Swift.Region }}\n    region: {{ .Spec.Storage.Driver.Swift.Region | quote }}\n    {{- end }}\n  {{- end }}\n\n{{- if ( or .Spec.Middlewares.Registry ( or .Spec.Middlewares.Repository .Spec.Middlewares.Storage ) ) }}\nmiddleware:\n  {{- if .Spec.Middlewares.Registry }}\n  registry:\n    {{- range $index, $middleware := .Spec.Middlewares.Registry }}\n    - name: {{ $middleware.Name | quote }}\n      {{- if $middleware.OptionsRef }}\n      options: {{ secretData $middleware.OptionsRef | toJson }}\n      {{- end }}\n    {{- end }}\n  {{- end }}\n  {{- if .Spec.Middlewares.Repository }}\n  registry:\n    {{- range $index, $middleware := .Spec.Middlewares.Repository }}\n    - name: {{ $middleware.Name | quote }}\n      {{- if $middleware.OptionsRef }}\n      options: {{ secretData $middleware.OptionsRef | toJson }}\n      {{- end }}\n    {{- end }}\n  {{- end }}\n  {{- if .Spec.Middlewares.Storage }}\n  registry:\n    {{- range $index, $middleware := .Spec.Middlewares.Storage }}\n    - name: {{ $middleware.Name | quote }}\n      {{- if $middleware.OptionsRef }}\n      options: {{ secretData $middleware.OptionsRef | toJson }}\n      {{- end }}\n    {{- end }}\n  {{- end }}\n{{- end }}\n{{- if .Spec.Redis }}\nredis:\n  {{- if .Spec.Redis.SentinelMasterSet }}\n  sentinelMasterSet: {{ .Spec.Redis.SentinelMasterSet | quote }}\n  {{- end }}\n  {{- if .Spec.Redis.Port }}\n  addr: {{ printf \"%s:%d\" .Spec.Redis.Host .Spec.Redis.Port | quote }}\n  {{- else }}\n  addr: {{ .Spec.Redis.Host | quote }}\n  {{- end }}\n  # password: setted through environment variable\n  db: {{ .Spec.Redis.Database }}\n  {{- if .Spec.Redis.DialTimeout }}\n  dialtimeout: {{ .Spec.Redis.DialTimeout.Duration }}\n  {{- end }}\n  {{- if .Spec.Redis.ReadTimeout }}\n  readtimeout: {{ .Spec.Redis.ReadTimeout.Duration }}\n  {{- end }}\n  {{- if .Spec.Redis.WriteTimeout }}\n  writetimeout: {{ .Spec.Redis.WriteTimeout.Duration }}\n  {{- end }}\n  {{- if ( or .Spec.Redis.Pool.MaxIdle ( or .Spec.Redis.Pool.MaxActive .Spec.Redis.Pool.IdleTimeout ) ) }}\n  pool:\n    {{- if .Spec.Redis.Pool.MaxIdle }}\n    maxidle: {{ .Spec.Redis.Pool.MaxIdle }}\n    {{- end }}\n    {{- if .Spec.Redis.Pool.MaxActive }}\n    maxactive: {{ .Spec.Redis.Pool.MaxActive }}\n    {{- end }}\n    {{- if .Spec.Redis.Pool.IdleTimeout }}\n    idletimeout: {{ .Spec.Redis.Pool.IdleTimeout.Duration }}\n    {{- end }}\n  {{- end }}\n{{- end }}\n{{- if .Spec.Proxy }}\nproxy:\n  remoteurl: {{ .Spec.Proxy.RemoteURL | quote }}\n  # username: setted through environment variable\n  # password: setted through environment variable\n{{- end }}\ncompatibility:\n  schema1:\n    # signingkeyfile: setted through environment variable\n    enabled: {{ .Spec.Compatibility.Schema1.Enabled }}\nvalidation:\n  disabled: {{ .Spec.Validation.Disabled }}\n  {{- if or .Spec.Validation.Manifests.URLs.Allow .Spec.Validation.Manifests.URLs.Deny }}\n  manifests:\n    urls:\n      {{- if .Spec.Validation.Manifests.URLs.Allow }}\n      allow: {{ .Spec.Validation.Manifests.URLs.Allow | toJson }}\n      {{- end }}\n      {{- if .Spec.Validation.Manifests.URLs.Deny }}\n      deny: {{ .Spec.Validation.Manifests.URLs.Deny | toJson }}\n      {{- end }}\n  {{- end }}\n{{- if ( or .Spec.Authentication.Silly ( or .Spec.Authentication.Token .Spec.Authentication.HTPasswd ) ) }}\nauth:\n  {{- if .Spec.Authentication.Silly }}\n  silly:\n    realm: {{ .Spec.Authentication.Silly.Realm | quote }}\n    service: {{ .Spec.Authentication.Silly.Service | quote }}\n  {{- end }}\n  {{- if .Spec.Authentication.Token }}\n  token:\n    realm: {{ .Spec.Authentication.Token.Realm | quote }}\n    service: {{ .Spec.Authentication.Token.Service | quote }}\n    issuer: registry-token-issuer\n    rootcertbundle: /root/certs/bundle\n    autoredirect: {{ .Spec.Authentication.Token.AutoRedirect }}\n  {{- end }}\n  {{- if .Spec.Authentication.HTPasswd }}\n  htpasswd:\n    realm: {{ .Spec.Authentication.HTPasswd.Realm | quote }}\n    # path: setted through environment variable\n  {{- end }}\n{{- end }}\nnotifications:\n  {{- if .Spec.Notifications.Endpoints }}\n  endpoints:\n    {{- range $_, $endpoint := .Spec.Notifications.Endpoints }}\n    - name: {{ $endpoint.Name | quote }}\n      disabled: {{ $endpoint.Disabled }}\n      url: {{ $endpoint.URL | quote }}\n      {{- if $endpoint.Headers }}\n      headers: {{ $endpoint.Headers | toJson }}\n      {{- end }}\n      {{- if $endpoint.Timeout }}\n      timeout: {{ $endpoint.Timeout.Duration }}\n      {{- end }}\n      {{- if $endpoint.Threshold }}\n      threshold: {{ $endpoint.Threshold }}\n      {{- end }}\n      {{- if $endpoint.Backoff }}\n      backoff: {{ $endpoint.Backoff }}\n      {{- end }}\n      {{- if $endpoint.IgnoredMediaTypes }}\n      ignoredmediatypes: {{ $endpoint.IgnoredMediaTypes | toJson }}\n      {{- end }}\n      {{- if ( or $endpoint.Ignore.MediaTypes $endpoint.Ignore.Actions ) }}\n      ignore:\n        {{- if $endpoint.Ignore.MediaTypes }}\n        mediatypes: {{ $endpoint.Ignore.MediaTypes | toJson }}\n        {{- end }}\n        {{- if $endpoint.Ignore.Actions }}\n        actions: {{ $endpoint.Ignore.Actions | toJson }}\n        {{- end }}\n      {{- end }}\n    {{- end }}\n  {{- end }}\n  events:\n    includereferences: {{ default true .Spec.Notifications.Events.IncludeReferences }}\n\nhealth:\n  storagedriver:\n    enabled: {{ default true .Spec.Health.StorageDriver.Enabled }}\n    {{- if .Spec.Health.StorageDriver.Interval }}\n    interval: {{ .Spec.Health.StorageDriver.Interval.Duration }}\n    {{- end }}\n    {{- if .Spec.Health.StorageDriver.Threshold }}\n    threshold: {{ .Spec.Health.StorageDriver.Threshold }}\n    {{- end }}\n\n  {{- if .Spec.Health.File }}\n  file:\n    {{- range $_, $health := .Spec.Health.File }}\n    - file: {{ $health.File | quote }}\n      {{- if $health.Interval }}\n      interval: {{ $health.Interval.Duration }}\n      {{- end }}\n    {{- end }}\n  {{- end }}\n\n  {{- if .Spec.Health.HTTP }}\n  http:\n    {{- range $_, $health := .Spec.Health.HTTP }}\n    - uri: {{ $health.URI | quote }}\n      headers: {{ $health.Headers | toJson }}\n      {{- if $health.StatusCode }}\n      statuscode: {{ $health.StatusCode }}\n      {{- end }}\n      {{- if $health.Timeout }}\n      timeout: {{ $health.Timeout.Duration }}\n      {{- end }}\n      {{- if $health.Interval }}\n      interval: {{ $health.Interval.Duration }}\n      {{- end }}\n      threshold: {{ $health.Threshold }}\n    {{- end }}\n  {{- end }}\n\n  {{- if .Spec.Health.TCP }}\n  tcp:\n    {{- range $_, $health := .Spec.Health.TCP }}\n    - addr: {{ $health.Address | quote }}\n      {{- if $health.Timeout }}\n      timeout: {{ $health.Timeout.Duration }}\n      {{- end }}\n      {{- if $health.Interval }}\n      interval: {{ $health.Interval.Duration }}\n      {{- end }}\n      threshold: {{ $health.Threshold }}\n    {{- end }}\n  {{- end }}\n"
  registryctl-config.yaml.tmpl: |
    {{- if .Spec.TLS.Enabled }}
    protocol: https
    port: 8443
    https_config:
      cert: /etc/registryctl/ssl/tls.crt
      key: /etc/registryctl/ssl/tls.key
    {{- else }}
    protocol: http
    port: 8080
    {{- end }}
    log_level: {{ default "info" .Spec.Log.Level }}
    registry_config: /etc/registry/config.yml
kind: ConfigMap
metadata:
  annotations:
    goharbor.io/deploy-engine: Kustomization
    goharbor.io/deploy-mode: cluster
    goharbor.io/operator-version: v1.0.0
  name: config-template
  namespace: kube-repo
---
apiVersion: v1
data:
  api_port: "8080"
  aws_region: eu-central-1
  cluster_domain: cluster.local
  cluster_history_entries: "1000"
  cluster_labels: application:spilo
  cluster_name_label: cluster-name
  connection_pooler_image: registry.opensource.zalan.do/acid/pgbouncer:master-7
  db_hosted_zone: db.example.com
  debug_logging: "true"
  docker_image: registry.opensource.zalan.do/acid/spilo-12:1.6-p3
  enable_master_load_balancer: "false"
  enable_replica_load_balancer: "false"
  enable_teams_api: "false"
  logical_backup_docker_image: registry.opensource.zalan.do/acid/logical-backup
  logical_backup_s3_bucket: my-bucket-url
  logical_backup_s3_sse: AES256
  logical_backup_schedule: 30 00 * * *
  master_dns_name_format: '{cluster}.{team}.{hostedzone}'
  pdb_name_format: postgres-{cluster}-pdb
  pod_deletion_wait_timeout: 10m
  pod_label_wait_timeout: 10m
  pod_management_policy: ordered_ready
  pod_role_label: spilo-role
  pod_service_account_name: postgres-pod
  pod_terminate_grace_period: 5m
  ready_wait_interval: 3s
  ready_wait_timeout: 30s
  repair_period: 5m
  replica_dns_name_format: '{cluster}-repl.{team}.{hostedzone}'
  replication_username: standby
  resource_check_interval: 3s
  resource_check_timeout: 10m
  resync_period: 30m
  ring_log_lines: "100"
  secret_name_template: '{username}.{cluster}.credentials'
  spilo_privileged: "false"
  super_username: postgres
  watched_namespace: '*'
  workers: "4"
kind: ConfigMap
metadata:
  annotations:
    goharbor.io/deploy-engine: Kustomization
    goharbor.io/deploy-mode: cluster
    goharbor.io/operator-version: v1.0.0
  name: postgres-operator
  namespace: kube-repo
---

apiVersion: v1
kind: Service
metadata:
  annotations:
    goharbor.io/deploy-engine: Kustomization
    goharbor.io/deploy-mode: cluster
    goharbor.io/operator-version: v1.0.0
  name: webhook-service
  namespace: kube-repo
spec:
  ports:
    - port: 443
      targetPort: 9443
  selector:
    control-plane: harbor-operator
---

apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  annotations:
    goharbor.io/deploy-engine: Kustomization
    goharbor.io/deploy-mode: cluster
    goharbor.io/operator-version: v1.0.0
  name: serving-cert
  namespace: kube-repo
spec:
  dnsNames:
    - webhook-service.kube-repo.svc
    - webhook-service.kube-repo.svc.cluster.local
  issuerRef:
    kind: ClusterIssuer
    name: ca-issuer
  secretName: webhook-server-cert
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  annotations:
    cert-manager.io/inject-ca-from: kube-repo/serving-cert
    goharbor.io/deploy-engine: Kustomization
    goharbor.io/deploy-mode: cluster
    goharbor.io/operator-version: v1.0.0
  name: mutating-webhook-configuration
webhooks:
  - admissionReviewVersions:
      - v1beta1
    clientConfig:
      service:
        name: webhook-service
        namespace: kube-repo
        path: /mutate-goharbor-io-v1alpha3-harbor
    failurePolicy: Fail
    name: mharbor.kb.io
    rules:
      - apiGroups:
          - goharbor.io
        apiVersions:
          - v1alpha3
        operations:
          - CREATE
          - UPDATE
        resources:
          - harbors
    sideEffects: None
  - admissionReviewVersions:
      - v1beta1
    clientConfig:
      service:
        name: webhook-service
        namespace: kube-repo
        path: /mutate-goharbor-io-v1alpha3-harborcluster
    failurePolicy: Fail
    name: mharborcluster.kb.io
    rules:
      - apiGroups:
          - goharbor.io
        apiVersions:
          - v1alpha3
        operations:
          - CREATE
          - UPDATE
        resources:
          - harborclusters
    sideEffects: None
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  annotations:
    cert-manager.io/inject-ca-from: kube-repo/serving-cert
    goharbor.io/deploy-engine: Kustomization
    goharbor.io/deploy-mode: cluster
    goharbor.io/operator-version: v1.0.0
  name: validating-webhook-configuration
webhooks:
  - admissionReviewVersions:
      - v1beta1
    clientConfig:
      service:
        name: webhook-service
        namespace: kube-repo
        path: /validate-goharbor-io-v1alpha3-harbor
    failurePolicy: Fail
    name: vharbor.kb.io
    rules:
      - apiGroups:
          - goharbor.io
        apiVersions:
          - v1alpha3
        operations:
          - CREATE
          - UPDATE
        resources:
          - harbors
    sideEffects: None
  - admissionReviewVersions:
      - v1beta1
    clientConfig:
      service:
        name: webhook-service
        namespace: kube-repo
        path: /validate-goharbor-io-v1alpha3-harborcluster
    failurePolicy: Fail
    name: vharborcluster.kb.io
    rules:
      - apiGroups:
          - goharbor.io
        apiVersions:
          - v1alpha3
        operations:
          - CREATE
          - UPDATE
        resources:
          - harborclusters
    sideEffects: None
  - admissionReviewVersions:
      - v1beta1
    clientConfig:
      service:
        name: webhook-service
        namespace: kube-repo
        path: /validate-goharbor-io-v1alpha3-jobservice
    failurePolicy: Fail
    name: vjobservice.kb.io
    rules:
      - apiGroups:
          - goharbor.io
        apiVersions:
          - v1alpha3
        operations:
          - CREATE
          - UPDATE
        resources:
          - jobservices
    sideEffects: None
  - admissionReviewVersions:
      - v1beta1
    clientConfig:
      service:
        name: webhook-service
        namespace: kube-repo
        path: /validate-goharbor-io-v1alpha3-notaryserver
    failurePolicy: Fail
    name: vnotaryserver.kb.io
    rules:
      - apiGroups:
          - goharbor.io
        apiVersions:
          - v1alpha3
        operations:
          - CREATE
          - UPDATE
        resources:
          - notaryservers
    sideEffects: None
  - admissionReviewVersions:
      - v1beta1
    clientConfig:
      service:
        name: webhook-service
        namespace: kube-repo
        path: /validate-goharbor-io-v1alpha3-notarysigner
    failurePolicy: Fail
    name: vnotarysigner.kb.io
    rules:
      - apiGroups:
          - goharbor.io
        apiVersions:
          - v1alpha3
        operations:
          - CREATE
          - UPDATE
        resources:
          - notarysigners
    sideEffects: None
  - admissionReviewVersions:
      - v1beta1
    clientConfig:
      service:
        name: webhook-service
        namespace: kube-repo
        path: /validate-goharbor-io-v1alpha3-registry
    failurePolicy: Fail
    name: vregistry.kb.io
    rules:
      - apiGroups:
          - goharbor.io
        apiVersions:
          - v1alpha3
        operations:
          - CREATE
          - UPDATE
        resources:
          - registries
    sideEffects: None